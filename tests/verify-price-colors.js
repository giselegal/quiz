/**
 * Script para verificar a implementa√ß√£o das cores e imagens na se√ß√£o de pre√ßos
 * 
 * Este script verifica se as cores, elementos visuais e imagens foram
 * aplicados corretamente na exibi√ß√£o de pre√ßos na p√°gina de resultados.
 */

(function checkPriceColorAndImages() {
  console.log('üîç Verificando cores, efeitos visuais e imagens na exibi√ß√£o de pre√ßos...');
  
  // Verificar CTA principal
  const mainCTA = document.querySelector('#cta .flex.flex-col.items-center > div.mb-6');
  if (!mainCTA) {
    console.error('‚ùå CTA principal n√£o encontrado!');
    return false;
  }
  
  // Verificar badge de desconto
  const discountBadge = mainCTA.querySelector('.absolute.-top-4.-right-12');
  if (discountBadge) {
    console.log('‚úÖ Badge de desconto encontrado');
    
    // Verificar cor do badge
    const badgeStyle = window.getComputedStyle(discountBadge);
    console.log(`   Cor de fundo do badge: ${badgeStyle.backgroundColor}`);
    
    // Verificar texto do badge
    const badgeText = discountBadge.textContent?.trim();
    console.log(`   Texto do badge: ${badgeText}`);
  } else {
    console.warn('‚ö†Ô∏è Badge de desconto n√£o encontrado');
  }
  
  // Verificar √≠cone de tempo limitado
  const timerIcon = mainCTA.querySelector('.absolute.-top-3.-left-16');
  if (timerIcon) {
    console.log('‚úÖ √çcone de tempo limitado encontrado');
    
    // Verificar anima√ß√£o
    const hasAnimationClass = timerIcon.querySelector('.animate-pulse') !== null;
    console.log(`   Anima√ß√£o de pulso: ${hasAnimationClass ? 'Presente' : 'Ausente'}`);
    
    // Verificar texto
    const timerText = timerIcon.textContent?.trim();
    console.log(`   Texto do timer: ${timerText}`);
  } else {
    console.warn('‚ö†Ô∏è √çcone de tempo limitado n√£o encontrado');
  }
  
  // Verificar mockup do guia
  const guideMockup = mainCTA.querySelector('.mt-6.relative.max-w-\\[180px\\]');
  if (guideMockup) {
    console.log('‚úÖ Mockup do guia encontrado');
    
    // Verificar rota√ß√£o
    const mockupElement = guideMockup.querySelector('.transform.-rotate-3');
    if (mockupElement) {
      console.log('   Rota√ß√£o aplicada corretamente');
    } else {
      console.warn('‚ö†Ô∏è Rota√ß√£o no mockup n√£o encontrada');
    }
    
    // Verificar selo de garantia
    const garanteeElement = guideMockup.querySelector('.absolute.-bottom-4.-right-4');
    if (garanteeElement) {
      console.log('‚úÖ Selo de garantia encontrado');
      const garanteeText = garanteeElement.textContent?.trim();
      console.log(`   Texto da garantia: ${garanteeText}`);
    } else {
      console.warn('‚ö†Ô∏è Selo de garantia n√£o encontrado');
    }
  } else {
    console.warn('‚ö†Ô∏è Mockup do guia n√£o encontrado');
  }
  
  // Verificar pre√ßo parcelado
  const installmentContainer = mainCTA.querySelector('p:nth-child(3)');
  if (installmentContainer) {
    const priceSpan = installmentContainer.querySelector('span');
    if (priceSpan) {
      const priceStyle = window.getComputedStyle(priceSpan);
      
      // Verificar o gradiente
      console.log('‚úÖ Elemento de pre√ßo parcelado encontrado');
      console.log(`   Tamanho da fonte: ${priceStyle.fontSize}`);
      console.log(`   Background: ${priceStyle.backgroundImage}`);
      console.log(`   Texto transparente: ${priceStyle.webkitBackgroundClip || priceStyle.backgroundClip}`);
      
      // Confirmar se o gradiente foi aplicado
      if (priceStyle.backgroundImage.includes('gradient')) {
        console.log('‚úÖ Gradiente aplicado corretamente ao pre√ßo');
      } else {
        console.warn('‚ö†Ô∏è Gradiente n√£o detectado no pre√ßo');
      }
    } else {
      console.warn('‚ö†Ô∏è Span do pre√ßo parcelado n√£o encontrado');
    }
  } else {
    console.warn('‚ö†Ô∏è Container do pre√ßo parcelado n√£o encontrado');
  }
  
  // Verificar bot√£o com efeito brilho
  const ctaButton = document.querySelector('#cta button.group');
  if (ctaButton) {
    console.log('‚úÖ Bot√£o com classe "group" encontrado');
    
    // Verificar efeito de brilho
    const shineEffect = ctaButton.querySelector('div.absolute.bg-white');
    if (shineEffect) {
      console.log('‚úÖ Efeito de brilho encontrado no bot√£o');
    } else {
      console.warn('‚ö†Ô∏è Efeito de brilho n√£o encontrado no bot√£o');
    }
    
    // Verificar √≠cone animado
    const cartIcon = ctaButton.querySelector('.group-hover\\:scale-110');
    if (cartIcon) {
      console.log('‚úÖ √çcone com anima√ß√£o de hover encontrado');
    } else {
      console.warn('‚ö†Ô∏è √çcone sem anima√ß√£o de hover');
    }
  } else {
    console.warn('‚ö†Ô∏è Bot√£o com classe "group" n√£o encontrado');
  }
  
  // Verificar sticky CTA
  const stickyCTA = document.querySelector('.fixed.bottom-0 .container span.text-xl.font-bold');
  if (stickyCTA) {
    const stickyStyle = window.getComputedStyle(stickyCTA);
    
    console.log('‚úÖ Pre√ßo no CTA fixo encontrado');
    console.log(`   Tamanho da fonte: ${stickyStyle.fontSize}`);
    console.log(`   Background: ${stickyStyle.backgroundImage}`);
    
    // Verificar se o gradiente tamb√©m foi aplicado no sticky
    if (stickyStyle.backgroundImage.includes('gradient')) {
      console.log('‚úÖ Gradiente aplicado corretamente ao pre√ßo no CTA fixo');
    } else {
      console.warn('‚ö†Ô∏è Gradiente n√£o detectado no pre√ßo do CTA fixo');
    }
  } else {
    console.warn('‚ö†Ô∏è Pre√ßo no CTA fixo n√£o encontrado');
  }
  
  console.log('‚úÖ Verifica√ß√£o das cores e imagens conclu√≠da!');
  return true;
})();
